import streamlit as st
import mysql.connector
import datetime
import matplotlib.pyplot as plt
import numpy as np
import altair as alt
import pandas as pd
import plotly.express as px
from mysql.connector import Error
from streamlit_option_menu import option_menu
from mysql.connector import Error
from matplotlib import rc

rc('font', family='Tahoma')


def db_con():
    try:
        connection = mysql.connector.connect(host="localhost",user="root",password="",database="jodwai")
        if connection.is_connected():
            return connection
    except Error as e:
        st.error("Error connecting to DB: %s" % e)
    return None
    
def wannee():
    date_today = datetime.date.today()
    return date_today

def login():
    st.title("üîê Login")
    email = st.text_input("Email")
    password = st.text_input("Password", type="password")
    
    if st.button("Don't Have an Account?",type="tertiary"):
        st.session_state["current_page"] = "Register"  

    if st.button("Login"):
        con = db_con()
        if con:
            cursor = con.cursor()
            try:
                cursor.execute("SELECT * FROM account WHERE email = %s AND password = %s", (email, password))
                user = cursor.fetchone()
                if user:
                    st.toast('Login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', icon='‚úÖ')
                    st.session_state["logged_in"] = True
                    st.session_state["email"] = email
                    st.session_state["current_page"] = "Home"
                    st.session_state["user_data"] = {"email": user[1],"name": user[3],"lastname": user[4]}
                else:
                    st.toast('Email ‡∏´‡∏£‡∏∑‡∏≠ Password ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', icon='‚õî')
            except Error as e:
                st.error("Error: %s" % e)
            finally:
                cursor.close()
                con.close()

def register():
    st.title("üìù Register")
    name = st.text_input("Name")
    lastname = st.text_input("Lastname")
    email = st.text_input("Email")
    password = st.text_input("Password", type="password")
    confirm_password = st.text_input("Confirm Password", type="password")
    
    if st.button("already have an account?",type="tertiary"):
        st.session_state["current_page"] = "Login" 
    
    if st.button("Register"):
        if not name or not lastname or not email or not password or not confirm_password:
            st.toast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡πà‡∏≠‡∏á', icon='‚ö†Ô∏è')
        elif password != confirm_password:
            st.toast('Password ‡πÅ‡∏•‡∏∞ Confirm Password ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô', icon='‚ö†Ô∏è')
        else:
            con = db_con()
            if con:
                cursor = con.cursor()
                try:
                    cursor.execute(
                        "INSERT INTO account (email, password, name, lastname) VALUES (%s, %s, %s, %s)",
                        (email, password, name, lastname),
                    )
                    con.commit()
                    st.toast('‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö', icon='üìù')
                    st.session_state["current_page"] = "Login" 
                except Error as e:
                    st.error("Error: %s" % e)
                finally:
                    cursor.close()
                    con.close()
import matplotlib.pyplot as plt

def home():
    st.title("üè† Home")
    user_data = st.session_state.get("user_data", {})
    email = st.session_state["email"]
    
    st.subheader(f"Welcome K.{user_data.get('name')} {user_data.get('lastname')} to JodWai!")
    
    st.subheader("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    start_date = st.date_input("‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    end_date = st.date_input("‡∏ñ‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
    
    if start_date > end_date:
        st.toast('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î',icon='‚ö†Ô∏è')
        return
    
    con = db_con()
    if con:
        cursor = con.cursor(dictionary=True)
        try:
            cursor.execute("""SELECT type, SUM(amount) AS total FROM expense WHERE email = %s AND date BETWEEN %s AND %s GROUP BY type""", (email, start_date, end_date))
            summary = cursor.fetchall()

            cursor.execute("""SELECT description, SUM(amount) AS total FROM expense WHERE email = %s AND type = 'expense' AND date BETWEEN %s AND %s GROUP BY description""", (email, start_date, end_date))
            expense_details = cursor.fetchall()
        except Error as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return
        finally:
            cursor.close()
    
    income = next((item["total"] for item in summary if item["type"] == "income"), 0)
    expense = next((item["total"] for item in summary if item["type"] == "expense"), 0)
    
    if income == 0 and expense == 0:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        return
    labels = ["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"]
    values = [income, expense]

    fig, ax = plt.subplots(figsize=(6, 6))
    ax.bar(labels, values, color=['#28a745', '#dc3545'], edgecolor='black', linewidth=1.5)
    ax.set_ylabel('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)', fontsize=12)
    ax.set_title('‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢\n', fontsize=14, fontweight='bold')
    ax.set_ylim(0, max(values) + 100)  # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
    ax.bar_label(ax.containers[0], labels=[f'{v} ‡∏ø' for v in values], fontsize=12, padding=5)

    st.subheader("\nüìä ‡πÅ‡∏ú‡∏ô‡∏†‡∏π‡∏°‡∏¥‡πÅ‡∏ó‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    st.pyplot(fig)

    if expense_details:
        expense_labels = [item["description"] for item in expense_details]
        expense_values = [item["total"] for item in expense_details]

        fig, ax = plt.subplots(figsize=(6, 6))
        wedges, texts, autotexts = ax.pie(expense_values, labels=expense_labels, autopct="%1.1f%%", startangle=90, colors=plt.cm.Paired.colors)
        ax.axis("equal")  

        for text in texts:
            text.set(fontsize=12, fontweight='bold', color='#333')  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        for autotext in autotexts:
            autotext.set(fontsize=12, color='#fff')  # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå

        st.subheader("üç¥ ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó")
        st.pyplot(fig)

    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏¢‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")


def jodwai():
    st.title("üí∞ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
    email = st.session_state["email"]    
    con = db_con()

    with st.form("form"):
        st.write("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà")
        date = wannee()
        amount = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô", min_value=0.0, step=0.01)
        selected_type = st.selectbox("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó", ["‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö", "‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"])
        expense_type = "income" if selected_type == "‡∏£‡∏≤‡∏¢‡∏£‡∏±‡∏ö" else "expense"

        if expense_type == "expense":
            description = st.selectbox("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", ["‡∏Ñ‡πà‡∏≤‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å", "‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á", "‡∏≠‡∏∑‡πà‡∏ô ‡πÜ"]
            )
        else:
            description = ""

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

        if submitted:
            if amount <= 0 or (expense_type == "expense" and not description.strip()):
                st.toast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô',icon='‚úèÔ∏è')
            else:
                try:
                    cursor = con.cursor()
                    cursor.execute(
                        "INSERT INTO expense (email, amount, type, description, date) VALUES (%s, %s, %s, %s, %s)",
                        (email, amount, expense_type, description, date),
                    )
                    con.commit()
                    st.toast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', icon='üìã')
                except Error as e:
                    st.toast(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                finally:
                    cursor.close()

def hantao():
    st.title("üçµ Hantao")
    st.subheader("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏£‡∏¥‡∏õ")

    email = st.session_state["email"]

    with st.form("add_expense_form"):
        description = st.text_area("‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏£‡∏¥‡∏õ")
        num_friends = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô", min_value=1, step=1)
        
        friend_names = []
        for i in range(num_friends):
            friend_name = st.text_input(f"‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà {i + 1}")
            friend_names.append(friend_name)

        amount = st.number_input("‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢ (‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", min_value=0.0, step=0.01)
        if amount > 0 and num_friends > 0:
            per_person = amount / (num_friends + 1)
            st.info(f"‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏ó‡∏£‡∏¥‡∏õ‡∏ô‡∏µ‡πâ: {amount:.2f} ‡∏ö‡∏≤‡∏ó\n‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏à‡πà‡∏≤‡∏¢: {per_person:.2f} ‡∏ö‡∏≤‡∏ó")

        submitted = st.form_submit_button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å")

        if submitted:
            if all(friend_names) and amount > 0:
                con = db_con()
                if con:
                    cursor = con.cursor()
                    try:
                        for friend_name in friend_names:
                            cursor.execute("""
                                INSERT INTO hantao_friend (email, friend_name, amount, activity)VALUES (%s, %s, %s, %s)""", (email, friend_name, per_person, description))
                        con.commit()
                        st.toast("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", icon="üìã")
                    except Error as e:
                        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                    finally:
                        cursor.close()
            else:
                st.toast("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô", icon="‚úèÔ∏è")

    st.subheader("‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏ó‡∏£‡∏¥‡∏õ")
    col1, col2 = st.columns(2)
    with col1:
        start_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
    with col2:
        end_date = st.date_input("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î")

    if st.button("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"):
        if start_date > end_date:
            st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        else:
            con = db_con()
            if con:
                cursor = con.cursor(dictionary=True)
                try:
                    query = """SELECT friend_name, SUM(amount) AS total_amount FROM hantao_friend WHERE email = %s AND date BETWEEN %s AND %s GROUP BY friend_name"""
                    cursor.execute(query, (email, start_date, end_date))
                    res = cursor.fetchall()

                    if res:
                        df = pd.DataFrame(res)
                        
                        fig = px.bar(df, x="friend_name", y="total_amount", text="total_amount", title="‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏µ‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î")
                        fig.update_traces(texttemplate="%{text:.2f} ‡∏ö‡∏≤‡∏ó", textposition="outside")
                        fig.update_layout(yaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)", xaxis_title="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô")

                        st.plotly_chart(fig)
                    else:
                        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
                except Error as e:
                    st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
                finally:
                    cursor.close()


if "logged_in" not in st.session_state:
    st.session_state["logged_in"] = False

if st.session_state["logged_in"]:
    with st.sidebar:
        selected = option_menu("Main Menu",["Home", "Income,Expense","Han Tao!", "Logout"],
            icons=["house", "book" ,"cash", "box-arrow-right"],
            menu_icon="cast",
            default_index=0,)
        
    if selected == "Home":
        home()
    elif selected == "Income,Expense":
        jodwai()
    elif selected == "Han Tao!":
        hantao()
    elif selected == "Logout":
        st.session_state["logged_in"] = False
        st.session_state["current_page"] = "Login" 
else:
    if "current_page" not in st.session_state:
        st.session_state["current_page"] = "Login"
    
    if st.session_state["current_page"] == "Login":
        login()
    elif st.session_state["current_page"] == "Register":
        register()
